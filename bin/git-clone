#!/bin/bash
config="$HOME/.config/git-clone/config"
version="0.2.0"

# usernames can have dots; sourced files cannot
encode_user () {
  echo "${1//\./DOT}"
}

decode_user () {
  echo "${1//DOT/.}"
}

update_or_add () {
  key="$1"
  value="$2"
  file="${3:-"$config"}"
  if ! [ -f "$file" ]; then
    folder="${file%/*}"
    mkdir -p "$folder"
  else
    # strip any existing value
    sed -i.bkp -Ee "/^${key}=/d" "$file" && rm "${file}.bkp"
  fi
  if [ -n "$value" ]; then
    echo "$key=$value" >> "$file"
  fi
  if [ "GIT_DEFAULT_USER" == "$key" ]; then
    fullKey="GIT_TOKEN_${value}"
    set_gh_token "${!fullKey}"
  fi
}

get_username () {
  username="$1"
  if [ -z "$username" ]; then
    read -rp "Git Username: " username
  fi
  read -s -rp "Git Personal Access Token for $username: " token
  echo ""
  active_user_e="$(encode_user "$username")"
  key="GIT_TOKEN_$active_user_e"
  update_or_add "$key" "$token"
  if [ "$username" == "$GIT_DEFAULT_USER" ]; then
    set_gh_token "$token"
  fi
  # Set token for later in process
  eval "$key=$token"
}

edit_config () {
  if [ -n "$1" ]; then
    username="$1"
  else
    usernames=()
    i=0
    options="Users:"
    message="Select account to edit (#"
    while read -r line; do
      line="${line%%=*}"
      name="${line##GIT_TOKEN_}"
      if ! [ "$name" == "$line" ]; then
        name=$(decode_user "$name")
        (( i+=1 ))
        usernames+=("$name")
        if [ "$GIT_DEFAULT_USER" == "$name" ]; then
          message="$message or blank for '$name'"
          name="$name * (current default)"
          inuse=$i
        fi
        options="${options}\n - [$i] $name"
      fi # if we find unexpected lines, just skip 'em
    done < "$config"

    if [ "${#usernames[@]}" -eq 0 ]; then
      echo "No users to edit! Try adding a token with $me -u"
      exit
    elif [ "${#usernames[@]}" -eq 1 ]; then
      num=1
    else
      echo -e "$options"
      read -rp "$message) " num
      [ -z "$num" ] && num=$inuse
      if [ -z "$num" ]; then
        echo "No user selected - exiting."
        exit
      fi
    fi
    (( num-=1 ))
    username="${usernames[num]}"
  fi

  if [ -n "$2" ]; then
    action="$2"
  else
    printf "Actions:
    [1] Edit %s's token
    [2] Set %s as default
    [3] Remove %s (NOT RECOVERABLE)
    (Pressing Enter with no selection will exit)
  " "$username" "$username" "$username"
    read -rp "Select Action for $username: " action
  fi
  if [ -z "$action" ]; then
    echo "No action chosen"
  elif [ "$action" == '1' ] ; then
    get_username "$username" > /dev/null
  elif [ "$action" == '2' ] ; then
    update_or_add 'GIT_DEFAULT_USER' "$username"
  elif [ "$action" == '3' ] ; then
    update_or_add "GIT_TOKEN_$username"
  else
    echo "Input not recognized"
  fi
}

set_gh_token () {
  token_file=${GITHUB_TOKEN_FILE:-"$HOME/.doNotCommit.d/.doNotCommit.gitClone"}
  update_or_add "GITHUB_TOKEN" "$1" "$token_file"
}

# Attempts to use the `dotfiles` folder concepts from Flare576/dotfiles. Where git is concerned:
# - generic settings are stored in ~/dotfiles/.gitconfig
# - personal details (name/email) are stored in ~/dotfiles/.gitconfig.personal
# - ~/.gitconfig and ~/.gitconfig.personal exist as symlinks to the ~/dotfiles instances
# - ~/dotfiles/.gitconfig has a section `include.path=~/.gitconfig.personal`
# If the ~/dotfiles folder isn't present, it will assume the user is handling the global settings with git
set_personal () {
  if [ -f "$HOME/.gitconfig" ]; then
    read -rp "Update global git user? (y/N) " global_git
  else
    global_git="y"
  fi
  if [[ $global_git =~ ^[yY] ]] ; then
    echo "Setting up global git information"
    read -rp "Global git user name: " guser
    read -rp "Global git user email: " gemail

    if ! [ -d "$HOME/dotfiles" ]; then
      git config --global user.name "$guser"
      git config --global user.email "$gemail"
      return
    else
      echo "Using your ~/dotfiles folder"
      personal="$HOME/dotfiles/.gitconfig.personal"
      touch "$personal"
      ln -sf "$personal" "$HOME"
      cat<<END > "$personal"
[user]
  name = ${guser}
  email = ${gemail}
END
    fi
  fi
}

me="$(basename "$0")"
usage="$me makes having multiple Git accounts more manageable via
separate Personal Access Tokens, HTTPS repositories, managing GITHUB_TOKEN,
and hierarchical .gitconfigs.

-e[dit]       Update default and tokens
-f[ix]        While in a working directory, update origin url to use default/given user and fix [include]
-g[itconfig]  Modify ~/.gitconfig.personal
-u[sername]   The git username to use
-b[ranch]     Checks out a specific branch of the project before continuing
-r[ecurse]    Recursively checkout (for projects with submodules)
-t[oken]      Set the file to use to manage GITHUB_TOKEN
              - default to ~/.doNotCommit.d/.doNotCommit.gitClone
              - set to /dev/null to disable
-v[ersion]    Print $me version and exit

Examples
clone -e  # Add accounts, define default
clone https://github.com/flare576/git-clone # use default username/PAT
clone flare576/git-clone # Assumes 'hub' style username/project
clone my-project # Uses default username
clone -u otheraccount https://other.com/project # supports multiple usernames"

while getopts ':rgu:efb:t:hv' option; do
  case "$option" in
    h) echo "$usage"
      exit
      ;;
    v) echo "Version $version"
      exit
      ;;
    e) do_edit='true'
      ;;
    f) do_fix="true"
      ;;
    g) do_personal='true'
      ;;
    u) username="$OPTARG"
      ;;
    t) new_token_file="$OPTARG"
      ;;
    b) branch="$OPTARG"
      ;;
    r) recurse="deep"
      ;;
    *) echo "Unrecognized param: $OPTARG"
      ;;
  esac
done
shift $((OPTIND -1))

if [ -n "$new_token_file" ]; then
  set_gh_token # remove current token
  update_or_add "GITHUB_TOKEN_FILE" "$new_token_file"
  eval "GITHUB_TOKEN_FILE=\"$new_token_file\""
  if [ -n "$GIT_DEFAULT_USER" ]; then
    fullKey="GIT_TOKEN_${$GIT_DEFAULT_USER}"
    set_gh_token "${!fullKey}"
  fi
fi

if [ -f "$config" ]; then
  # shellcheck disable=SC1090
  source "$config"
else
  ran_set="true"
  get_username "$username"
  # Mark first user as default
  edit_config "$username" "2"
  set_personal
  echo "user1: $username"
fi

repo="$1"

if [ -n "$do_edit" ]; then
  edit_config "$username"
  ran_set='true'
fi
if [ -n "$do_personal" ]; then
  set_personal
  ran_set='true'
fi

if [ -z "$username" ]; then
  if [ -z "$GIT_DEFAULT_USER" ]; then
    username=$(get_username)
    edit_config "$username"
    set_personal
  else
    username="$GIT_DEFAULT_USER"
  fi
fi
username_e=$(encode_user "$username")
token_key="GIT_TOKEN_$username_e"
token="${!token_key}"
if [ -z "$token" ]; then
  get_username "$username" > /dev/null
  echo
fi

if [ -n "$do_fix" ] && [ -f ".git/config" ]; then
  echo "Updating .git/config to use $username"
  sed -i.bkp -Ee "s%https?://(.*@)?%https://$username:$token@%" .git/config && rm .git/config.bkp

  if [ -f ".gitmodules" ]; then
    echo "Updating .git/config to use $username in submodules"
    while read -r line; do
      if [[ $line =~ \"([^\"]+)\" ]]; then
        submod="${BASH_REMATCH[1]}"
      elif [[ "$line" == *"url ="* ]]; then
        url=$(echo "$line" | sed -Ee "s%.*https://([^@]*@)?%https://$username:$token@%")
        git config "submodule.${submod}.url" "$url"
        pushd ".git/modules/${submod}" &> /dev/null || exit
        git config "remote.origin.url" "$url"
        popd &> /dev/null || exit
      fi
    done < .gitmodules
  fi

  if ! grep -q '\[include\]' .git/config; then
    parent_dir="$(pwd)"
    parent_dir="${parent_dir%/*}"
    parent_config="$parent_dir/.gitconfig"
    if [ -f "$parent_config" ]; then
      echo "Updating .git/config to have [include] for parent config"
      include="[include]
  path = $parent_config"
      echo "$include" >> .git/config
      # Assume that if had to write the top-level, you need to write the sub projects
      if [ -f ".gitmodules" ]; then
        echo "Updating .git/config to have [include] for parent config in submodules"
        find ./.git/modules -maxdepth 1 -type d ! -path ./.git/modules \
          -exec sh -c 'echo "$1" >> "$0/config"' {} "$include" \;
      fi
    else
      echo "No parent config found at $parent_config, skipping user config"
    fi
  fi
  exit
fi

# If no repo/project provided, stop
if [ -z "$1" ]; then
  exit
fi

# If only provided project name, assume username is owner
if [[ "$repo" != *"/"* ]]; then
  repo="$username/$repo"
fi
# support hub-style shortnames user-or-org/project for github
# shortnames are not supported for gitlab, bitbucket, etc.
if [[ "$repo" =~ ^[^/]*/[^/]*$ ]]; then
  repo="https://github.com/$repo"
fi

if [ -z "$repo" ]; then
  if [ -z "$ran_set" ]; then
    echo "[31mNo repo URL provided[0m"
    echo "$usage"
  fi
  exit
fi

# https://www.tldp.org/LDP/abs/html/string-manipulation.html
name=${repo##*/} # Deletes longest instance of * (anything)/ (the slash) from front
name=${name%.git} # Deletes shortest instance of ".git" from back
auth_repo=${repo/https:\/\//https://$username:$token@}

command="git clone"

message="You're checking out $repo as $username"
if [ -n "$branch" ]; then
  message="$message using $branch branch"
  command="$command -b $branch"
fi
command="$command $auth_repo"
if [ -n "$recurse" ]; then
  message="$message and its submodules"
fi

echo "$message"
if $command; then
  parent_config="$(pwd)/.gitconfig"

  cd "$name" || exit
  if [ -f "$parent_config" ]; then
    include="[include]
    path = $parent_config"
    echo "$include" >> .git/config
  else
    echo "No parent config found at $parent_config, skipping user config"
  fi

  if [ -n "$recurse" ]; then
    while read -r line; do
      # Doesn't use --recurse-submodules because the URLs will need to PAT added
      if [[ $line =~ \"([^\"]+)\" ]]; then
        submod="${BASH_REMATCH[1]}"
      elif [[ "$line" == *"url ="* ]]; then
        url=$(echo "$line" | sed -Ee "s%.*https://([^@]*@)?%https://$username:$token@%")
        git config "submodule.${submod}.url" "$url"
      fi
    done < .gitmodules
    git submodule update --init --recursive
    find ./.git/modules -maxdepth 1 -type d ! -path ./.git/modules -exec sh -c 'echo "$1" >> "$0/config"' {} "$include" \;
  fi
fi
